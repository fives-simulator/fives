cmake_minimum_required(VERSION 3.14)
project(fives)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Module includes
include(FetchContent)
include(ExternalProject)

# Fives version
set(FIVES_VERSION_MAJOR "0")
set(FIVES_VERSION_MINOR "1")
set(FIVES_VERSION_PATCH "0")

# Commit/tag for each dependency to build from source
set(NLOHMANNJSON_GIT_REF "v3.11.3")
set(SIMGRID_GIT_REF "v3.36")
set(WRENCH_GIT_REF "v2.5")

# Prepare and set placeholder for downloading / building / installing external dependencies such as SimGrid and WRENCH
set(EXTERNAL_DIR ${CMAKE_SOURCE_DIR}/external CACHE PATH "Directory for external dependencies")
set(LOCAL_INSTALL_DIR ${EXTERNAL_DIR}/install_deps CACHE PATH "Local installation directory for dependencies")
file(MAKE_DIRECTORY ${EXTERNAL_DIR})
file(MAKE_DIRECTORY ${LOCAL_INSTALL_DIR})

set(NUM_CORES "4") # Number of cores to use to build projects.

# SimGrid
ExternalProject_Add(
    simgrid
    GIT_REPOSITORY https://framagit.org/simgrid/simgrid.git
    GIT_TAG        ${SIMGRID_GIT_REF}
    SOURCE_DIR     ${EXTERNAL_DIR}/simgrid
    INSTALL_DIR    ${LOCAL_INSTALL_DIR}
    CMAKE_ARGS     -DCMAKE_INSTALL_PREFIX=${LOCAL_INSTALL_DIR}
    BUILD_COMMAND ${CMAKE_COMMAND} --build . --parallel ${NUM_CORES}
    BUILD_IN_SOURCE ON
)

# nlohmann/json
FetchContent_Declare(
    json
    URL https://github.com/nlohmann/json/releases/download/${NLOHMANNJSON_GIT_REF}/json.tar.xz
    DOWNLOAD_EXTRACT_TIMESTAMP ON  # Rebuild if URL changes and timestamps of download and extract are not the same anymore
)
FetchContent_MakeAvailable(json)


# Add the local installation paths to the include and link directories
include_directories(${LOCAL_INSTALL_DIR}/include)
link_directories(${LOCAL_INSTALL_DIR}/lib)

# Main target
add_executable(fives main.cpp) 
add_dependencies(fives simgrid) 
target_link_libraries(fives PRIVATE nlohmann_json::nlohmann_json)